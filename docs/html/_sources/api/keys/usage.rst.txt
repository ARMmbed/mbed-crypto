.. _key-usage:

Key policies
============

Key usage flags
---------------

.. macro:: PSA_KEY_USAGE_EXPORT
    :definition: ((psa_key_usage_t)0x00000001)

    .. summary::
        Permission to export the key.

    This flag allows the use of `psa_export_key()` to export a key from the cryptoprocessor. A public key or the public part of a key pair can always be exported regardless of the value of this permission flag.

    This flag can also be required to copy a key using `psa_copy_key()` outside of a secure element. See also `PSA_KEY_USAGE_COPY`.

    If a key does not have export permission, implementations must not allow the key to be exported in plain form from the cryptoprocessor, whether through `psa_export_key()` or through a proprietary interface. The key might still be exportable in a wrapped form, i.e. in a form where it is encrypted by another key.

.. macro:: PSA_KEY_USAGE_COPY
    :definition: ((psa_key_usage_t)0x00000002)

    .. summary::
        Permission to copy the key.

    This flag allows the use of `psa_copy_key()` to make a copy of the key with the same policy or a more restrictive policy.

    For lifetimes for which the key is located in a secure element which enforce the non-exportability of keys, copying a key outside the secure element also requires the usage flag `PSA_KEY_USAGE_EXPORT`. Copying the key inside the secure element is permitted with just `PSA_KEY_USAGE_COPY` if the secure element supports it. For keys with the lifetime `PSA_KEY_LIFETIME_VOLATILE` or `PSA_KEY_LIFETIME_PERSISTENT`, the usage flag `PSA_KEY_USAGE_COPY` is sufficient to permit the copy.

.. macro:: PSA_KEY_USAGE_CACHE
    :definition: ((psa_key_usage_t)0x00000004)

    .. summary::
        Permission for the implementation to cache the key.

    This flag allows the implementation to make additional copies of the key material that are not in storage and not for the purpose of an ongoing operation. Applications can use it as a hint to keep the key around for repeated access.

    An application can request that cached key material is removed from memory by calling `psa_purge_key()`.

    The presence of this key policy when creating a key is a hint:

    - An implementation is not required to cache keys that have this policy.
    - An implementation must not report an error if it does not cache keys.

    If this key policy is not present, the implementation must ensure key material is removed from memory as soon as it is not required for an operation or for maintenance of a volatile key.

    This flag must be preserved when reading back the attributes for all keys, regardless of key type or implementation behavior.

    See also :title:`key-material`.

.. macro:: PSA_KEY_USAGE_ENCRYPT
    :definition: ((psa_key_usage_t)0x00000100)

    .. summary::
        Permission to encrypt a message with the key.

    This flag allows the key to be used for a symmetric encryption operation, for an AEAD encryption-and-authentication operation, or for an asymmetric encryption operation, if otherwise permitted by the key's type and policy. The flag must be present on keys used with the following APIs:

    * `psa_cipher_encrypt()`
    * `psa_cipher_encrypt_setup()`
    * `psa_aead_encrypt()`
    * `psa_aead_encrypt_setup()`
    * `psa_asymmetric_encrypt()`

    For a key pair, this concerns the public key.

.. macro:: PSA_KEY_USAGE_DECRYPT
    :definition: ((psa_key_usage_t)0x00000200)

    .. summary::
        Permission to decrypt a message with the key.

    This flag allows the key to be used for a symmetric decryption operation, for an AEAD decryption-and-verification operation, or for an asymmetric decryption operation, if otherwise permitted by the key's type and policy. The flag must be present on keys used with the following APIs:

    * `psa_cipher_decrypt()`
    * `psa_cipher_decrypt_setup()`
    * `psa_aead_decrypt()`
    * `psa_aead_decrypt_setup()`
    * `psa_asymmetric_decrypt()`

    For a key pair, this concerns the private key.

.. macro:: PSA_KEY_USAGE_SIGN_MESSAGE
    :definition: ((psa_key_usage_t)0x00000400)

    .. summary::
        Permission to sign a message with the key.

    This flag allows the key to be used for a MAC calculation operation or for an asymmetric message signature operation, if otherwise permitted by the key's type and policy. The flag must be present on keys used with the following APIs:

    * `psa_mac_compute()`
    * `psa_mac_sign_setup()`
    * `psa_sign_message()`

    For a key pair, this concerns the private key.

.. macro:: PSA_KEY_USAGE_VERIFY_MESSAGE
    :definition: ((psa_key_usage_t)0x00000800)

    .. summary::
        Permission to verify a message signature with the key.

    This flag allows the key to be used for a MAC verification operation or for an asymmetric message signature verification operation, if otherwise permitted by the key's type and policy. The flag must be present on keys used with the following APIs:

    * `psa_mac_verify()`
    * `psa_mac_verify_setup()`
    * `psa_verify_message()`

    For a key pair, this concerns the public key.

.. macro:: PSA_KEY_USAGE_SIGN_HASH
    :definition: ((psa_key_usage_t)0x00001000)

    .. summary::
        Permission to sign a message hash with the key.

    This flag allows the key to be used to sign a message hash as part of an asymmetric signature operation, if otherwise permitted by the key's type and policy. The flag must be present on keys used when calling `psa_sign_hash()`.

    This flag automatically sets `PSA_KEY_USAGE_SIGN_MESSAGE`: if an application sets the flag `PSA_KEY_USAGE_SIGN_HASH` when creating a key, then the key always has the permissions conveyed by `PSA_KEY_USAGE_SIGN_MESSAGE`, and the flag `PSA_KEY_USAGE_SIGN_MESSAGE` will also be present when the application queries the usage policy of the key.

    For a key pair, this concerns the private key.

.. macro:: PSA_KEY_USAGE_VERIFY_HASH
    :definition: ((psa_key_usage_t)0x00002000)

    .. summary::
        Permission to verify a message hash with the key.

    This flag allows the key to be used to verify a message hash as part of an asymmetric signature verification operation, if otherwise permitted by the key's type and policy. The flag must be present on keys used when calling `psa_verify_hash()`.

    This flag automatically sets `PSA_KEY_USAGE_VERIFY_MESSAGE`: if an application sets the flag `PSA_KEY_USAGE_VERIFY_HASH` when creating a key, then the key always has the permissions conveyed by `PSA_KEY_USAGE_VERIFY_MESSAGE`, and the flag `PSA_KEY_USAGE_VERIFY_MESSAGE` will also be present when the application queries the usage policy of the key.

    For a key pair, this concerns the public key.

.. macro:: PSA_KEY_USAGE_DERIVE
    :definition: ((psa_key_usage_t)0x00004000)

    .. summary::
        Permission to derive other keys from this key.

    This flag allows the key to be used for a key derivation operation or for a key agreement operation, if otherwise permitted by by the key's type and policy. The flag must be present on keys used with the following APIs:

    * `psa_key_derivation_input_key()`
    * `psa_key_derivation_key_agreement()`
    * `psa_raw_key_agreement()`

Attribute accessors
-------------------

.. function:: psa_set_key_usage_flags

    .. summary::
        Declare usage flags for a key.

    .. param:: psa_key_attributes_t * attributes
        The attribute object to write to.
    .. param:: psa_key_usage_t usage_flags
        The usage flags to write.

    .. return:: void

    Usage flags are part of a key's usage policy. They encode what kind of operations are permitted on the key. For more details, refer to the documentation of the type `psa_key_usage_t`.

    This function overwrites any usage flags previously set in ``attributes``.

    .. admonition:: Implementation note

        This is a simple accessor function that is not required to validate its inputs. The following approaches can be used to provide an efficient implementation:

        - This function can be declared as ``static`` or ``inline``, instead of using the default external linkage.
        - This function can be provided as a function-like macro. In this form, the macro must evaluate each of its arguments exactly once, as if it was a function call.

.. function:: psa_get_key_usage_flags

    .. summary::
        Retrieve the usage flags from key attributes.

    .. param:: const psa_key_attributes_t * attributes
        The key attribute object to query.

    .. return:: psa_key_usage_t
        The usage flags stored in the attribute object.

    .. admonition:: Implementation note

        This is a simple accessor function that is not required to validate its inputs. The following approaches can be used to provide an efficient implementation:

        - This function can be declared as ``static`` or ``inline``, instead of using the default external linkage.
        - This function can be provided as a function-like macro. In this form, the macro must evaluate each of its arguments exactly once, as if it was a function call.
